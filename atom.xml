<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王宁宁博客</title>
  <subtitle>勿忘初心，珍惜当下</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://arunning.wang/"/>
  <updated>2017-01-13T11:47:28.761Z</updated>
  <id>http://arunning.wang/</id>
  
  <author>
    <name>ning wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面向对象</title>
    <link href="http://arunning.wang/2017/01/13/object/"/>
    <id>http://arunning.wang/2017/01/13/object/</id>
    <published>2017-01-13T11:49:13.998Z</published>
    <updated>2017-01-13T11:47:28.761Z</updated>
    
    <content type="html"><![CDATA[<p>#面向对象总复习</p>
<p>##面向对象的基本概念</p>
<p>###面向对象和面向过程分别是什么？<br>      都是思维方式：<br>       面向过程的思维方式是将解决问题的每一个详细步骤上。<br>       面向对象的思维方式是将解决问题的关注点放在解决问题所需压迫的一系列对象上。<br>面向对象就是对面向过程的封装</p>
<p>###什么是对象？<br>      万物皆对象<br>JavaScript中的对象就是无序键值对的集合</p>
<p>###什么是属性，什么是方法？</p>
<pre><code>JavaScript对象中，如果键对应的值是数据，那么这个键就称为属性
                               如果jian对应的值是函数，那么这个键就称为方法
</code></pre><p>###名词提炼法<br>在一个句子中，只要是名词就可以把他看作一个对象，这种提炼对象的方式就叫名词提炼法</p>
<p>##面向对象编程举例</p>
<p>##面向对象的三大特性<br>1.使用面向过程的思维方式去考虑问题，写出来的代码存在如下问题；<br><em>代码复用性太差
</em>结构混乱<br><em>全局污染<br>2.使用函数进行封装，解决复用性的问题，但又出现以下问题
</em>全局污染<br>*代码结构混乱<br>3.使用对象进行封装，解决了以上所有问题</p>
<p>##面向对象的三大特性</p>
<p>###封装</p>
<blockquote>
<p>在面向对象程序设计方法中，封装（英语：Encapsulation）是指，一种将抽象性函数接口的实现细节部分包装、隐藏起来的方法。同时，它也是一种防止外界调用端，去访问对象内部实现细节的手段，这个手段是由编程语言本身来提供的。这两个概念有一些不同，但通常被混合使用。封装被视为是面向对象的四项原则之一。<br>  适当的封装，可以将对象使用接口的程序实现部分隐藏起来，不让用户看到，同时确保用户无法任意更改对象内部的重要数据。它可以让代码更容易理解与维护，也加强了代码的</p>
</blockquote>
<p>将数据和行为全部封装到对象内，实现一些功能，给外界提供一些接口，外界在使用功能的时候只需要通过接口来调用，而不需要关系对象内部的具体实现，这就是封装。</p>
<p>###继承</p>
<blockquote>
<p>继承：是面向对象软件技术当中的一个概念。如果一个类别A“继承自”另一个类别B，就把这个A称为“B的子类别”，而把B称为“A的父类别”也可以称“B是A的超类”。继承可以使得子类别具有父类别的各种属性和方法，而不需要再次编写相同的代码。在令子类别继承父类别的同时，可以重新定义某些属性，并重写某些方法，即覆盖父类别的原有属性和方法，使其获得与父类别不同的功能。另外，为子类别追加新的属性和方法也是常见的做法。 一般静态的面向对象编程语言，继承属于静态的，意即在子类别的行为在编译期就已经决定，无法在执行期扩充。<br>一个对象没有某些属性和方法，另一个对象有，拿过来用，就是继承</p>
<p>###多态<br>JS中没有多态<br>父类指针指向子类对象</p>
<p>##创建对象的方式</p>
<p>###字面量方式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">      <span class="attr">key</span> : value,</div><div class="line">       <span class="attr">key</span> : value</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>通过字面量创建对象，每次创建的对象都只能当次使用，下次如果还要使用，就得再写一次</p>
<p>###内置构造函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="built_in">Object</span>();</div></pre></td></tr></table></figure></p>
<p>每次创建的对象都是空的对象，都得去手动的添加成员，所以也有复用性问题</p>
<p>###自定义构造函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">this</span>.name=<span class="string">"abc"</span>;</div><div class="line">       <span class="keyword">this</span>.age=<span class="number">18</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> Person();</div></pre></td></tr></table></figure></p>
<p>##构造函数</p>
<p>###构造函数的概念<br>构造函数也是一个函数，和普通函数不同的地方在于，构造函数是用来初始化对象的</p>
<p>###构造函数的特性<br><em>首字母大写
</em>通常和New关键字配合使用<br><em>不需要写return语句，默认返回新的创建的对象
</em>如果手动写了return语句<br>        如果是值类型的数据，则会对返回值没有任何的影响<br>        如果是引用类型的数据，则会替换掉默认的返回值</p>
<p>###构造函数的执行顺序<br>1.先使用<code>new</code>关键字创建对象<br>2.调用构造函数，将<code>this</code>指针赋值为新创建出来的对象<br>3.在构造函数内部，使用<code>this</code>为新创建出来的对象新增成员<br>4.默认返回新创建出来的对象</p>
<p>###如果将构造函数当做普通函数来调用<br><em>函数内部的<code>this</code>指向了<code>window</code>
</em>返回值默认为<code>undefind</code></p>
<p>##原型</p>
<p>###原型的概念<br>构造函数在创建出来的时候，系统会默认的给构造函数创建一个空的对象，这个对象就叫原型。</p>
<p>###原型的作用<br>原型中的成员可以被和其关联的构造函数创建出来的所有的对象共享</p>
<p>###原型的访问形式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">构造函数.prototype</div><div class="line">对象.__proto__   非标准属性，有兼容性问题   调试使用</div></pre></td></tr></table></figure></p>
<p>###原型的使用方式<br><em>利用动态特性为原型对象添加属性和方法
</em>直接替换原型对象</p>
<p>###原型的使用注意事项<br>1.一般情况下将方法放在原型对象中，将属性放在对象中<br>2.在获取属性的时候，需要遵循属性搜寻原则<br>3.在设置属性的时候，不需要遵守属性搜许原则<br>4.在替换原型的时候,替换之前创建的对象的原型和替换之后创建的对象的原型不一致</p>
<p>##继承</p>
<p>###混入式继承（mix-in)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=&#123;&#125;;</div><div class="line"><span class="keyword">var</span> obj1=&#123;</div><div class="line">   <span class="attr">name</span>:<span class="string">"abc"</span>；</div><div class="line">   age:<span class="number">18</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj1)&#123;</div><div class="line">    obj[k]=obj1[k];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###原型继承<br>1.使用混入的方式给原型对象添加属性和方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>=</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> parentObj=&#123;</div><div class="line">       <span class="attr">name</span>:<span class="string">"周周"</span>,</div><div class="line">       <span class="attr">age</span>:<span class="number">7</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> parentObj)&#123;</div><div class="line">     Person.prototype[k]=parentObj[k];</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> Person();</div></pre></td></tr></table></figure></p>
<p>2.直接修改原型对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">Person.prototype.name=<span class="string">"abc"</span>;</div><div class="line">Person.prototype.age=<span class="number">18</span>;</div><div class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> Person();</div></pre></td></tr></table></figure></p>
<p>3.替换原型对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> human=&#123;</div><div class="line">      <span class="attr">name</span>:<span class="string">"abc"</span>,</div><div class="line">      <span class="attr">age</span>:<span class="number">18</span></div><div class="line">  &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">Person.prototype=human;</div><div class="line"><span class="keyword">var</span>  obj=<span class="keyword">new</span> Person();</div></pre></td></tr></table></figure></p>
<p>###.经典继承<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> parentObj=&#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">"abc"</span>,</div><div class="line">    <span class="attr">age</span>:<span class="number">18</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//创建一个继承自parentObj的对象obj</span></div><div class="line"><span class="keyword">var</span> obj=<span class="built_in">Object</span> create(parentObj);</div><div class="line"></div><div class="line"><span class="comment">//原理：其实还是原型继承</span></div></pre></td></tr></table></figure></p>
<p>####经典继承的兼容性问题解决（内置对象不可以随便修改）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCreate</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">Object</span>.create)&#123;</div><div class="line">             <span class="keyword">return</span> <span class="built_in">Object</span> create(obj);</div><div class="line">     &#125;<span class="keyword">else</span>&#123;</div><div class="line">             <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">             F.prototype=obj;</div><div class="line">             <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>##原型链<br>每一个对象都有一个原型，每一个原型都是对象，每一个原型也都有原型，就形成了链式结构，称为原型链。</p>
<ol>
<li>先画构造函数</li>
<li>因为有构造函数就有原型，所以画原型</li>
<li>画构造函数和原型之间的关系</li>
<li>画实例化出来的对象</li>
<li>画实例和构造函数以及原型之间的关系</li>
<li>把原型当做对象来对待，找到原型的构造函数，将构造函数画出来</li>
<li>画出上一步中构造函数的原型</li>
<li>把第6步和第7不步中的构造函数和原型之间的关系画出来</li>
<li>把第6步中的原型和其构造函数还有原型之间的关系画出来<br>重复 6-9 直到画到 Object.prototype 让其原型指向null 就结束了<br>###属性搜索原则<br>1.先在对象本身中进行查找，如果找到了就直接使用<br>2.如果没有，就去原型中查找，如果找到了就直接使用<br>3.如果没有找到，就去原型的原型中查找，以此往复，直到找到null</li>
</ol>
<p>###Array.prototype是一个空数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//arr----&gt;Array.prototype----&gt;Object.prototype---&gt;null</span></div><div class="line"><span class="keyword">var</span> arr=[];</div></pre></td></tr></table></figure></p>
<p>##instanceof关键字<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//语法：对象.instanceof.构造函数|关键字，</span></div><div class="line"><span class="comment">//功能：判断构造函数的原型是不是在该对象的原型链上</span></div><div class="line"><span class="comment">//返回值：boolean</span></div></pre></td></tr></table></figure></p>
<p>##Object.prototype的成员<br>|名称|语法|说明|返回值|<br>|–|–|–|<br>|constructor|原型.constructor|属性，用来指向和原型相关的构造函数，可配置|构造函数创建出来的时候，系统创建原型的时候默认的让原型中的constructor属性指向构造函数本身2016/11/7 20:33:22<br>|hasOwnProperty|对象.hasOwnProperty(属性名)|方法，判断对象本身是否拥有指定的属性，（不包含原型中的成员）|boolean|<br>|isPrototypeOf|对象.isPrototypeOf(另外一个对象)|方法，判断一个对象是否是某个对象的原型|boolean|<br>|propertyIsEnumerable|对象.propertyIsEnumerable(属性名)|判断对象自己的属性是不是可以被遍历（for-in） |方法，不是自己的属性或者不能被遍历都会返回false|boolean|<br>|toString|对象.toString()|方法，将对象转换为字符串，默认返回值[object 构造函数名]|<br>|tolocaleString|对象.toString()|方法,将对象转换为本地格式的字符串，本地格式为系统格式|<br>|valueOf|对象.valueOf()|方法，当对象参与运算的时候，会默认的调用valueOf方法获取对象的值，如果可以参与运算，则直接使用，如果不能，则调用tostring方法|[]==![]  返回值：true  {}==！{} false|<br>|–proto–|对象.–proto–|属性，指向对象的原型|</p>
<p>##Function  和eval</p>
<p>###Function<br>可以使用Function来创建函数，它可以将字符串转换成代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果不传参数，则创建出来的是空函数</span></div><div class="line"><span class="keyword">var</span> fun=<span class="keyword">new</span> <span class="built_in">Function</span>();</div><div class="line"><span class="comment">//如果传一个参数，则这个参数为函数体</span></div><div class="line"><span class="keyword">var</span> fun1=<span class="keyword">new</span> <span class="built_in">Function</span>(methodBody);</div><div class="line"><span class="comment">//如果传多个参数，则最后一个参数为函数体，之前所有的都为函数的形参名</span></div><div class="line"><span class="keyword">var</span> fun2=<span class="keyword">new</span> <span class="built_in">Function</span>();</div></pre></td></tr></table></figure></p>
<p>###eval<br>可以将字符串转换成代码并且运行<br>当使用<code>eval</code>处理JSON格式字符串的时候，会将JSON字符串内的<code>{}</code>当做代码段来处理，会报错；</p>
<p>解决方案：<br><em>在JSON格式的字符串前后拼接<code>()</code>。
</em>将变量额声明（<code>var obj</code>）和<code>=</code>拼接在JSON格式的字符串之前</p>
<h3 id="eval和Function的区别和联系"><a href="#eval和Function的区别和联系" class="headerlink" title="eval和Function的区别和联系"></a>eval和Function的区别和联系</h3><p>####相同点<br><em>都可以将字符串转换成代码
</em>都存在安全性问题<br>*都存在性能问题</p>
<p>####不同点<br><em>Function创建出来的是函数，需要手动的去调用
</em>eval直接会将字符串转成代码进行执行</p>
<p>##静态成员和实例成员<br>静态成员：通过构造函数访问的成员是静态成员<br>实例成员：通过对象访问的成员是实例成员</p>
<p>##arguments对象<br>arguments对象是函数中的一个对象，在函数调用的时候，会将所有传入的实参依次存入该对象</p>
<p><em>arguments.length  获取传入实参的个数
</em>arguments.callee();   指向函数本身   用于匿名函数的递归</p>
<p>##完整的原型琏的绘制</p>
<p>##Object和Function的关系<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>  <span class="keyword">instanceof</span>  <span class="built_in">Function</span>)   <span class="literal">true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>  <span class="keyword">instanceof</span> <span class="built_in">Object</span>)      <span class="literal">true</span> </div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>  <span class="keyword">instanceof</span> <span class="built_in">Object</span>)    <span class="literal">true</span></div><div class="line">cosole.log(<span class="built_in">Function</span>  <span class="keyword">instanceof</span>  <span class="built_in">Function</span>)  <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.__proto__===<span class="built_in">Function</span>.prototype)   <span class="literal">true</span>;</div></pre></td></tr></table></figure></p>
<p>Function构造函数既是构造函数又是实例对象</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#面向对象总复习&lt;/p&gt;
&lt;p&gt;##面向对象的基本概念&lt;/p&gt;
&lt;p&gt;###面向对象和面向过程分别是什么？&lt;br&gt;      都是思维方式：&lt;br&gt;       面向过程的思维方式是将解决问题的每一个详细步骤上。&lt;br&gt;       面向对象的思维方式是将解决问题的关注点放
    
    </summary>
    
      <category term="object" scheme="http://arunning.wang/categories/object/"/>
    
    
      <category term="obj" scheme="http://arunning.wang/tags/obj/"/>
    
  </entry>
  
  <entry>
    <title>Angular</title>
    <link href="http://arunning.wang/2017/01/13/Angular/"/>
    <id>http://arunning.wang/2017/01/13/Angular/</id>
    <published>2017-01-13T10:40:01.000Z</published>
    <updated>2017-01-13T10:40:01.031Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SVN-Git</title>
    <link href="http://arunning.wang/2017/01/13/SVN-Git/"/>
    <id>http://arunning.wang/2017/01/13/SVN-Git/</id>
    <published>2017-01-13T10:39:48.000Z</published>
    <updated>2017-01-13T10:39:48.064Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://arunning.wang/2017/01/10/hello-world/"/>
    <id>http://arunning.wang/2017/01/10/hello-world/</id>
    <published>2017-01-10T13:09:21.492Z</published>
    <updated>2017-01-10T13:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
